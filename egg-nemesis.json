{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-03-26T00:00:00+00:00",
    "name": "Nemesis",
    "author": "enum314@gmail.com",
    "description": "A modern Node.js application template with Docker configuration and GitHub workflows.",
    "features": [
        "docker"
    ],
    "docker_image": "ghcr.io/ptero-eggs/yolks:nodejs_22",
    "docker_images": {
        "Node 22": "ghcr.io/ptero-eggs/yolks:nodejs_22",
        "Node 20": "ghcr.io/ptero-eggs/yolks:nodejs_20"
    },
    "file_denylist": [],
    "startup": "{{STARTUP_CMD}}",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"Done!\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Nemesis Node.js Template Install Script\r\n#\r\n# Server Files: \/mnt\/server\r\napt update\r\napt install -y curl wget tar jq file unzip make gcc g++ python3 python3-dev python3-pip libtool\r\nwget -qO- https:\/\/get.pnpm.io\/install.sh | ENV=\"$HOME\/.bashrc\" SHELL=\"$(which bash)\" bash -\r\n\r\n# Set repository variables from egg\r\nGITHUB_USER=\"${GITHUB_USERNAME:-enum314}\"\r\nREPOSITORY=\"${GITHUB_REPOSITORY:-nemesis}\"\r\nTAG=\"${GITHUB_TAG:-latest}\"\r\nTOKEN=\"${GITHUB_TOKEN}\"\r\n\r\nDEPLOY_DIR=\"/mnt/server\"\r\n\r\n# Make sure pterodactyl user can use pnpm\r\nexport PNPM_HOME=\"/usr/local/pnpm\"\r\nexport PATH=\"$PNPM_HOME:$PATH\"\r\npnpm config set store-dir /mnt/server/.pnpm-store\r\n\r\n# Ensure deployment directory exists\r\nif [ ! -d \"$DEPLOY_DIR\" ]; then\r\n    mkdir -p \"$DEPLOY_DIR\"\r\nfi\r\n\r\n# Download release tarball and checksum file\r\ncd /tmp\r\n\r\n# Construct the base release URL with token if provided\r\nif [ \"$TAG\" = \"latest\" ]; then\r\n    # Using latest release URL format\r\n    if [ -z \"$TOKEN\" ]; then\r\n        # Public repository\r\n        BASE_URL=\"https://github.com/${GITHUB_USER}/${REPOSITORY}/releases/latest/download\"\r\n    else\r\n        # Private repository with token\r\n        BASE_URL=\"https://${TOKEN}@github.com/${GITHUB_USER}/${REPOSITORY}/releases/latest/download\"\r\n    fi\r\nelse\r\n    # Using specific tag release URL format\r\n    if [ -z \"$TOKEN\" ]; then\r\n        # Public repository\r\n        BASE_URL=\"https://github.com/${GITHUB_USER}/${REPOSITORY}/releases/download/${TAG}\"\r\n    else\r\n        # Private repository with token\r\n        BASE_URL=\"https://${TOKEN}@github.com/${GITHUB_USER}/${REPOSITORY}/releases/download/${TAG}\"\r\n    fi\r\nfi\r\n\r\nRELEASE_URL=\"${BASE_URL}/bot.tar.gz\"\r\nCHECKSUM_URL=\"${BASE_URL}/checksum.txt\"\r\n\r\necho \"Downloading from: ${GITHUB_USER}/${REPOSITORY} (tag: ${TAG})\"\r\n\r\n# Download checksum file\r\necho \"Downloading checksum file...\"\r\nif [ -z \"$TOKEN\" ]; then\r\n    wget -q --show-progress \"$CHECKSUM_URL\" -O checksum.txt\r\nelse\r\n    wget -q --show-progress --header=\"Authorization: token ${TOKEN}\" \"$CHECKSUM_URL\" -O checksum.txt\r\nfi\r\n\r\nif [ $? -ne 0 ]; then\r\n    echo \"Failed to download checksum file. Aborting installation.\"\r\n    exit 1\r\nfi\r\n\r\n# Download tarball\r\necho \"Downloading release tarball...\"\r\nif [ -z \"$TOKEN\" ]; then\r\n    wget -q --show-progress \"$RELEASE_URL\" -O bot.tar.gz\r\nelse\r\n    wget -q --show-progress --header=\"Authorization: token ${TOKEN}\" \"$RELEASE_URL\" -O bot.tar.gz\r\nfi\r\n\r\nif [ $? -ne 0 ]; then\r\n    echo \"Failed to download release tarball. Aborting installation.\"\r\n    exit 1\r\nfi\r\n\r\n# Verify checksum\r\necho \"Verifying file integrity...\"\r\nCOMPUTED_CHECKSUM=$(sha256sum bot.tar.gz | awk '{print $1}')\r\nEXPECTED_CHECKSUM=$(cat checksum.txt | awk '{print $1}')\r\n\r\nif [ \"$COMPUTED_CHECKSUM\" != \"$EXPECTED_CHECKSUM\" ]; then\r\n    echo \"Checksum verification failed!\"\r\n    echo \"Expected: $EXPECTED_CHECKSUM\"\r\n    echo \"Got: $COMPUTED_CHECKSUM\"\r\n    echo \"The downloaded file may be corrupted or tampered with. Aborting installation.\"\r\n    rm bot.tar.gz checksum.txt\r\n    exit 1\r\nfi\r\n\r\necho \"Checksum verification successful!\"\r\n\r\n# Extract to server directory\r\necho \"Extracting files...\"\r\ntar -xzf bot.tar.gz -C \"$DEPLOY_DIR\"\r\nrm bot.tar.gz checksum.txt\r\n\r\n# Setup environment file\r\nif [ ! -f \"$DEPLOY_DIR/.env\" ]; then\r\n    if [ -f \"$DEPLOY_DIR/.env.example\" ]; then\r\n        cp \"$DEPLOY_DIR/.env.example\" \"$DEPLOY_DIR/.env\"\r\n        echo \"Created .env file from .env.example\"\r\n        # Update port in .env to match Pterodactyl's allocated port\r\n        sed -i \"s/PORT=.*/PORT={{server.build.default.port}}/g\" \"$DEPLOY_DIR/.env\"\r\n        echo \"Updated PORT in .env to {{server.build.default.port}}\"\r\n    else\r\n        echo \"Warning: No .env.example file found. Creating minimal .env file.\"\r\n        echo \"PORT={{server.build.default.port}}\" > \"$DEPLOY_DIR/.env\"\r\n        echo \"NODE_ENV=production\" >> \"$DEPLOY_DIR/.env\"\r\n    fi\r\nfi\r\n\r\necho \"Release has been installed from ${GITHUB_USER}/${REPOSITORY} (tag: ${TAG}).\"\r\necho \"Server will start on port {{server.build.default.port}} as configured in .env\"\r\n\r\nexit 0",
            "container": "ghcr.io/ptero-eggs/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Startup Command",
            "description": "The command that will be run to start the server. Modifying this may break the server.",
            "env_variable": "STARTUP_CMD",
            "default_value": "node .",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "GitHub Username",
            "description": "The GitHub username for the repository.",
            "env_variable": "GITHUB_USERNAME",
            "default_value": "enum314",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "GitHub Repository",
            "description": "The GitHub repository name.",
            "env_variable": "GITHUB_REPOSITORY",
            "default_value": "nemesis",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "GitHub Tag",
            "description": "The release tag to install (use 'latest' for the most recent release).",
            "env_variable": "GITHUB_TAG",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "GitHub Personal Access Token",
            "description": "Personal access token for private repositories (leave empty for public repositories).",
            "env_variable": "GITHUB_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        }
    ]
}