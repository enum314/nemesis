{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-10-24T21:40:06+08:00",
    "name": "Nemesis",
    "author": "enum314@gmail.com",
    "description": "A modern Discord bot template that can also be used as a foundation for any Node.js application. This template is designed to jumpstart your development with best practices and ready-to-use infrastructure.",
    "features": [
        "docker"
    ],
    "docker_images": {
        "Node 22": "ghcr.io\/ptero-eggs\/yolks:nodejs_22",
        "Node 23": "ghcr.io\/ptero-eggs\/yolks:nodejs_23",
        "Node 24": "ghcr.io\/ptero-eggs\/yolks:nodejs_24",
        "Node 25": "ghcr.io\/ptero-eggs\/yolks:nodejs_25"
    },
    "file_denylist": [],
    "startup": "npx --yes prisma migrate deploy;\r\nnpx --yes prisma generate;\r\nnode .",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"Done!\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Nemesis Node.js Template Install Script\r\n#\r\n# Server Files: \/mnt\/server\r\napt update\r\n# Install Node.js (from NodeSource, latest LTS version)\r\ncurl -fsSL https:\/\/deb.nodesource.com\/setup_22.x | bash -\r\napt install -y curl wget tar jq file unzip make gcc g++ python3 python3-dev python3-pip libtool nodejs\r\n\r\n# Install pnpm\r\nnpm install -g pnpm\r\npnpm config set store-dir \/mnt\/server\/.pnpm-store\r\n\r\n# Set repository variables from egg\r\nGITHUB_USER=\"${GITHUB_USERNAME:-enum314}\"\r\nREPOSITORY=\"${GITHUB_REPOSITORY:-nemesis}\"\r\nTAG=\"${GITHUB_TAG:-latest}\"\r\nTOKEN=\"${GITHUB_TOKEN}\"\r\n\r\nDEPLOY_DIR=\"\/mnt\/server\"\r\n\r\n# Ensure deployment directory exists\r\nif [ ! -d \"$DEPLOY_DIR\" ]; then\r\n    mkdir -p \"$DEPLOY_DIR\"\r\nfi\r\n\r\n# Download release tarball and checksum file\r\ncd \/tmp\r\n\r\necho \"Downloading from: ${GITHUB_USER}\/${REPOSITORY} (tag: ${TAG})\"\r\n\r\n# Decide API URL\r\nRELEASE_API_URL=\"https:\/\/api.github.com\/repos\/${GITHUB_USER}\/${REPOSITORY}\/releases\"\r\nif [ \"$TAG\" = \"latest\" ]; then\r\n    RELEASE_API_URL=\"${RELEASE_API_URL}\/latest\"\r\nelse\r\n    RELEASE_API_URL=\"${RELEASE_API_URL}\/tags\/${TAG}\"\r\nfi\r\n\r\n# Download logic for PRIVATE repos (token provided)\r\nif [ -n \"$TOKEN\" ]; then\r\n    echo \"Token detected. Using GitHub API for private release assets...\"\r\n\r\n    RELEASE_DATA=$(curl -s -H \"Authorization: Bearer ${TOKEN}\" \"$RELEASE_API_URL\")\r\n\r\n    BOT_ASSET_ID=$(echo \"$RELEASE_DATA\" | jq '.assets[] | select(.name == \"bot.tar.gz\") | .id')\r\n    CHECKSUM_ASSET_ID=$(echo \"$RELEASE_DATA\" | jq '.assets[] | select(.name == \"checksum.txt\") | .id')\r\n\r\n    if [ -z \"$BOT_ASSET_ID\" ] || [ -z \"$CHECKSUM_ASSET_ID\" ]; then\r\n        echo \"Error: Could not find required release assets.\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Downloading checksum.txt...\"\r\n    curl -sL -H \"Authorization: Bearer ${TOKEN}\" \\\r\n        -H \"Accept: application\/octet-stream\" \\\r\n        \"https:\/\/api.github.com\/repos\/${GITHUB_USER}\/${REPOSITORY}\/releases\/assets\/${CHECKSUM_ASSET_ID}\" \\\r\n        -o checksum.txt\r\n\r\n    echo \"Downloading bot.tar.gz...\"\r\n    curl -sL -H \"Authorization: Bearer ${TOKEN}\" \\\r\n        -H \"Accept: application\/octet-stream\" \\\r\n        \"https:\/\/api.github.com\/repos\/${GITHUB_USER}\/${REPOSITORY}\/releases\/assets\/${BOT_ASSET_ID}\" \\\r\n        -o bot.tar.gz\r\n\r\nelse\r\n    # Public repo fallback\r\n    echo \"No token provided. Assuming public release access.\"\r\n\r\n    if [ \"$TAG\" = \"latest\" ]; then\r\n        BASE_URL=\"https:\/\/github.com\/${GITHUB_USER}\/${REPOSITORY}\/releases\/latest\/download\"\r\n    else\r\n        BASE_URL=\"https:\/\/github.com\/${GITHUB_USER}\/${REPOSITORY}\/releases\/download\/${TAG}\"\r\n    fi\r\n\r\n    echo \"Downloading checksum.txt from public release...\"\r\n    wget -q --show-progress \"${BASE_URL}\/checksum.txt\" -O checksum.txt\r\n\r\n    echo \"Downloading bot.tar.gz from public release...\"\r\n    wget -q --show-progress \"${BASE_URL}\/bot.tar.gz\" -O bot.tar.gz\r\nfi\r\n\r\n# Validate downloads\r\nif [ ! -f bot.tar.gz ] || [ ! -f checksum.txt ]; then\r\n    echo \"Download failed. One or more files are missing.\"\r\n    exit 1\r\nfi\r\n\r\n# Verify checksum\r\necho \"Verifying file integrity...\"\r\nCOMPUTED_CHECKSUM=$(sha256sum bot.tar.gz | awk '{print $1}')\r\nEXPECTED_CHECKSUM=$(cat checksum.txt | awk '{print $1}')\r\n\r\nif [ \"$COMPUTED_CHECKSUM\" != \"$EXPECTED_CHECKSUM\" ]; then\r\n    echo \"Checksum verification failed!\"\r\n    echo \"Expected: $EXPECTED_CHECKSUM\"\r\n    echo \"Got: $COMPUTED_CHECKSUM\"\r\n    echo \"The downloaded file may be corrupted or tampered with. Aborting installation.\"\r\n    rm bot.tar.gz checksum.txt\r\n    exit 1\r\nfi\r\n\r\necho \"Checksum verification successful!\"\r\n\r\n# Remove dist directory if it exists to ensure a clean build\r\nif [ -d \"$DEPLOY_DIR\/dist\" ]; then\r\n    echo \"Removing dist directory...\"\r\n    rm -rf \"$DEPLOY_DIR\/dist\"\r\nfi\r\n\r\n# Extract to server directory\r\necho \"Extracting files...\"\r\ntar -xzf bot.tar.gz -C \"$DEPLOY_DIR\"\r\nrm bot.tar.gz checksum.txt\r\n\r\n# Move into deployment directory\r\ncd \"$DEPLOY_DIR\"\r\n\r\n# Install dependencies\r\necho \"Installing dependencies...\"\r\npnpm install --production\r\n\r\necho \"Release has been installed from ${GITHUB_USER}\/${REPOSITORY} (tag: ${TAG}).\"\r\n\r\nexit 0",
            "container": "ghcr.io\/ptero-eggs\/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "GitHub Username",
            "description": "The GitHub username for the repository.",
            "env_variable": "GITHUB_USERNAME",
            "default_value": "enum314",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "GitHub Repository",
            "description": "The GitHub repository name.",
            "env_variable": "GITHUB_REPOSITORY",
            "default_value": "nemesis",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "GitHub Tag",
            "description": "The release tag to install (use 'latest' for the most recent release).",
            "env_variable": "GITHUB_TAG",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "GitHub Personal Access Token",
            "description": "Personal access token for private repositories (leave empty for public repositories).",
            "env_variable": "GITHUB_TOKEN",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        }
    ]
}