name: Nemesis
author: enum314@gmail.com
description: A modern Node.js application template with Docker configuration and GitHub workflows.
exported_at: "2025-03-26T00:00:00+00:00"
docker_image: ghcr.io/ptero-eggs/yolks:nodejs_22
docker_images:
  Node 22: ghcr.io/ptero-eggs/yolks:nodejs_22
  Node 20: ghcr.io/ptero-eggs/yolks:nodejs_20
features:
  - docker
startup: "{{STARTUP_CMD}}"
config:
  files: {}
  startup:
    done: "Done!"
  logs: {}
  stop: "^C"
variables:
  - name: Startup Command
    description: The command that will be run to start the server. Modifying this may break the server.
    env_variable: STARTUP_CMD
    default_value: node .
    user_viewable: true
    user_editable: true
    rules: required|string
    field_type: text
  - name: GitHub Username
    description: The GitHub username for the repository.
    env_variable: GITHUB_USERNAME
    default_value: "enum314"
    user_viewable: true
    user_editable: true
    rules: required|string
    field_type: text
  - name: GitHub Repository
    description: The GitHub repository name.
    env_variable: GITHUB_REPOSITORY
    default_value: "nemesis"
    user_viewable: true
    user_editable: true
    rules: required|string
    field_type: text
  - name: GitHub Tag
    description: "The release tag to install (use 'latest' for the most recent release)."
    env_variable: GITHUB_TAG
    default_value: "latest"
    user_viewable: true
    user_editable: true
    rules: required|string
    field_type: text
  - name: GitHub Personal Access Token
    description: Personal access token for private repositories (leave empty for public repositories).
    env_variable: GITHUB_TOKEN
    default_value: ""
    user_viewable: true
    user_editable: true
    rules: nullable|string
    field_type: text
install:
  script: |
    #!/bin/bash
    # Nemesis Node.js Template Install Script
    #
    # Server Files: /mnt/server
    apt update
    apt install -y curl wget tar jq file unzip make gcc g++ python3 python3-dev python3-pip libtool
    wget -qO- https://get.pnpm.io/install.sh | ENV="$HOME/.bashrc" SHELL="$(which bash)" bash -

    # Set repository variables from egg
    GITHUB_USER="${GITHUB_USERNAME:-enum314}"
    REPOSITORY="${GITHUB_REPOSITORY:-nemesis}"
    TAG="${GITHUB_TAG:-latest}"
    TOKEN="${GITHUB_TOKEN}"

    DEPLOY_DIR="/mnt/server"

    # Make sure pterodactyl user can use pnpm
    export PNPM_HOME="/usr/local/pnpm"
    export PATH="$PNPM_HOME:$PATH"
    pnpm config set store-dir /mnt/server/.pnpm-store

    # Ensure deployment directory exists
    if [ ! -d "$DEPLOY_DIR" ]; then
        mkdir -p "$DEPLOY_DIR"
    fi

    # Download release tarball and checksum file
    cd /tmp

    echo "Downloading from: ${GITHUB_USER}/${REPOSITORY} (tag: ${TAG})"

    # Decide API URL
    RELEASE_API_URL="https://api.github.com/repos/${GITHUB_USER}/${REPOSITORY}/releases"
    if [ "$TAG" = "latest" ]; then
        RELEASE_API_URL="${RELEASE_API_URL}/latest"
    else
        RELEASE_API_URL="${RELEASE_API_URL}/tags/${TAG}"
    fi

    # Download logic for PRIVATE repos (token provided)
    if [ -n "$TOKEN" ]; then
        echo "Token detected. Using GitHub API for private release assets..."

        RELEASE_DATA=$(curl -s -H "Authorization: Bearer ${TOKEN}" "$RELEASE_API_URL")

        BOT_ASSET_ID=$(echo "$RELEASE_DATA" | jq '.assets[] | select(.name == "bot.tar.gz") | .id')
        CHECKSUM_ASSET_ID=$(echo "$RELEASE_DATA" | jq '.assets[] | select(.name == "checksum.txt") | .id')

        if [ -z "$BOT_ASSET_ID" ] || [ -z "$CHECKSUM_ASSET_ID" ]; then
            echo "Error: Could not find required release assets."
            exit 1
        fi

        echo "Downloading checksum.txt..."
        curl -sL -H "Authorization: Bearer ${TOKEN}" \
            -H "Accept: application/octet-stream" \
            "https://api.github.com/repos/${GITHUB_USER}/${REPOSITORY}/releases/assets/${CHECKSUM_ASSET_ID}" \
            -o checksum.txt

        echo "Downloading bot.tar.gz..."
        curl -sL -H "Authorization: Bearer ${TOKEN}" \
            -H "Accept: application/octet-stream" \
            "https://api.github.com/repos/${GITHUB_USER}/${REPOSITORY}/releases/assets/${BOT_ASSET_ID}" \
            -o bot.tar.gz

    else
        # Public repo fallback
        echo "No token provided. Assuming public release access."

        if [ "$TAG" = "latest" ]; then
            BASE_URL="https://github.com/${GITHUB_USER}/${REPOSITORY}/releases/latest/download"
        else
            BASE_URL="https://github.com/${GITHUB_USER}/${REPOSITORY}/releases/download/${TAG}"
        fi

        echo "Downloading checksum.txt from public release..."
        wget -q --show-progress "${BASE_URL}/checksum.txt" -O checksum.txt

        echo "Downloading bot.tar.gz from public release..."
        wget -q --show-progress "${BASE_URL}/bot.tar.gz" -O bot.tar.gz
    fi

    # Validate downloads
    if [ ! -f bot.tar.gz ] || [ ! -f checksum.txt ]; then
        echo "Download failed. One or more files are missing."
        exit 1
    fi


    # Verify checksum
    echo "Verifying file integrity..."
    COMPUTED_CHECKSUM=$(sha256sum bot.tar.gz | awk '{print $1}')
    EXPECTED_CHECKSUM=$(cat checksum.txt | awk '{print $1}')

    if [ "$COMPUTED_CHECKSUM" != "$EXPECTED_CHECKSUM" ]; then
        echo "Checksum verification failed!"
        echo "Expected: $EXPECTED_CHECKSUM"
        echo "Got: $COMPUTED_CHECKSUM"
        echo "The downloaded file may be corrupted or tampered with. Aborting installation."
        rm bot.tar.gz checksum.txt
        exit 1
    fi

    echo "Checksum verification successful!"

    # Extract to server directory
    echo "Extracting files..."
    tar -xzf bot.tar.gz -C "$DEPLOY_DIR"
    rm bot.tar.gz checksum.txt

    # Setup environment file
    if [ ! -f "$DEPLOY_DIR/.env" ]; then
        if [ -f "$DEPLOY_DIR/.env.example" ]; then
            cp "$DEPLOY_DIR/.env.example" "$DEPLOY_DIR/.env"
            echo "Created .env file from .env.example"
            # Update port in .env to match Pterodactyl's allocated port
            sed -i "s/PORT=.*/PORT={{server.build.default.port}}/g" "$DEPLOY_DIR/.env"
            echo "Updated PORT in .env to {{server.build.default.port}}"
        else
            echo "Warning: No .env.example file found. Creating minimal .env file."
            echo "PORT={{server.build.default.port}}" > "$DEPLOY_DIR/.env"
            echo "NODE_ENV=production" >> "$DEPLOY_DIR/.env"
        fi
    fi

    echo "Release has been installed from ${GITHUB_USER}/${REPOSITORY} (tag: ${TAG})."
    echo "Server will start on port {{server.build.default.port}} as configured in .env"

    exit 0
  container: ghcr.io/ptero-eggs/installers:debian
  entrypoint: bash
